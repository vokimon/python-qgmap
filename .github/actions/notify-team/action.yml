# TODO: Notify first green after red in a branch
# maybe using something like: https://github.com/MercymeIlya/last-workflow-status

# TODO: Remove duplicated repo and branch info

name: 'Notify team'
description: 'Notify the team of any failed action'
inputs:
  token:
    description: "Telegram Bot Token"
  to:
    description: "Target Telegram Channel"
outputs:
  random-number:
    description: "Random number"
    value: ${{ steps.random-number-generator.outputs.random-number }}
runs:
  using: "composite"
  steps:
    - name: Debug
      shell: bash
      if: false
      run: |
        echo MAAAMA MIIIAA
        echo "webhookUrl: ${{ inputs.webhook }}"
        echo "jobStatus: ${{ job.status }}"
        echo "imageUrl: ${{ format('https://github.com/{0}.png', github.event.head_commit.author.username) }}"
        echo "imageAltText: ${{ github.event.head_commit.author.name }}"
        echo "subtitle: ${{ github.event.head_commit.message }}"
        echo "title: ${{ format('{0} -- [{1}]', github.event.repository.name, github.event.ref) }}"

    - name: Obtain status of previous run on the branch
      if: always()
      shell: bash
      run: |
        lastrun=$(
          curl https://api.github.com/repos/${{github.repository}}/actions/runs |
          jq -r '[.workflow_runs | sort_by(.create_at) | .[] | select(.head_branch == "${{ github.ref_name }}") | select(.id != ${{github.run_id}}) | { "branch": .head_branch, "conclusion": .conclusion }  ] | .[-1].conclusion // "new_branch"'
        )
        echo "LAST_RUN=$lastrun"
        echo "LAST_RUN=$lastrun" >> $GITHUB_ENV

    - name: üì¢ Notify changes in Telegram
      uses: cbrgm/telegram-github-action@v1
      if: always()
      #if: job.status == 'failure'
      #if: job.status != 'success' || env.LAST_RUN != 'success'

      # this allows the build to succeed even when the notification fails
      # e.g. due to dependabot push, which may not have the secret
      continue-on-error: true
      with:
        token: ${{ inputs.token }}
        to: ${{ inputs.to }}
        parse-mode: 'markdown'
        disable-web-page-preview: true
        message: |
          ${{ format('{3} ‚Üí {2}: {0} `[{1}]`', github.event.repository.name, github.ref_name, (job.status == 'failure' && '‚ùå' ) || (job.status == 'success' && '‚úÖ' ) || job.status, (env.LAST_RUN == 'failure' && '‚ùå' ) || (env.LAST_RUN == 'success' && '‚úÖ' ) || (env.LAST_RUN == 'new_branch' && '‚ú®' ) || env.LAST_RUN ) }}

          ${{ format('Author: {0} ![Avatar](https://github.com/{1}.png)', github.event.head_commit.author.name, github.event.head_commit.author.username ) }}
          
          Commit: ${{ github.event.head_commit.message }}

          [Details](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) - [Repository](https://github.com/${{ github.repository }}) - [Changes](https://github.com/${{ github.repository }}/commit/${{ github.sha }})

#    - name: Google Chat Notificationa
#      uses: SimonScholz/google-chat-action@main
#      if: job.status == 'failure'
#      # this allows the build to succeed even when the notification fails
#      # e.g. due to dependabot push, which may not have the secret
#      continue-on-error: true
#      with:
#        # https://docs.github.com/en/webhooks/webhook-events-and-payloads
#        webhookUrl: ${{ inputs.webhook }}
#        jobStatus: ${{ job.status }}
#        imageUrl: ${{ format('https://github.com/{0}.png', github.event.head_commit.author.username) }}
#        imageAltText: ${{ github.event.head_commit.author.name }}
#        subtitle: ${{ github.event.head_commit.message }}
#        title: "${{ format('{0} -- [{1}]', github.event.repository.name, github.ref_name ) }}"


