# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push
  push:
  # Triggers the workflow on pull request events
  pull_request:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:
    runs-on: ubuntu-latest
    env:
      TRAVIS: 'true' # Skip tests requiring data
    strategy:
      matrix:
        python-version:
          #- '3.10'
          #- '3.11'
          - '3.12'
    name: Python ${{ matrix.python-version }}
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: ‚¨áÔ∏è Checkout Repo
        uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}

      - name: üêç Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install system dependencies
        run: |
          sudo apt update && sudo apt install -y libegl1-mesa-dev

      - name: üöÄ Install pip dependencies
        uses: BSFishy/pip-action@v1
        with:
          packages: |
            coveralls
            pytest-cov

      - name: üèóÔ∏è Install package
        run: |
          pip install -e .

      - name: ‚úÖ Unit tests
        run: |
          pytest --cov=qgmap qgmap

      - name: ‚òÇÔ∏è Coveralls
        uses: AndreMiras/coveralls-python-action@develop
        with:
          parallel: true
          flag-name: Unit tests

      - name: Obtain previous run status on the branch
        if: always()
        run: |
          lastrun=$(
            curl https://api.github.com/repos/${{github.repository}}/actions/runs |
            jq -r '[.workflow_runs | sort_by(.create_at) | .[] | select(.head_branch == "${{ github.ref_name }}") | select(.id != ${{github.run_id}}) | { "branch": .head_branch, "conclusion": .conclusion }  ] | .[-1].conclusion'
          )
          echo "LAST_RUN=$lastrun"
          echo "LAST_RUN=$lastrun" >> $GITHUB_ENV

      - name: üì¢ Notify changes
        uses: cbrgm/telegram-github-action@v1
        if: always()
        #if: job.status == 'failure'
        # this allows the build to succeed even when the notification fails
        # e.g. due to dependabot push, which may not have the secret
        continue-on-error: true
        with:
          token: ${{ secrets.TELEGRAM_TOKEN }}
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          parse-mode: 'markdown'
          disable-web-page-preview: true
          message: |
            ${{ format('{3} ‚Üí {2}: {0} `[{1}]`', github.event.repository.name, github.ref_name, (job.status == 'failure' && '‚ùå' ) || (job.status == 'success' && '‚úÖ' ) || job.status, (env.LAST_RUN == 'failure' && '‚ùå' ) || (env.LAST_RUN == 'success' && '‚úÖ' ) || (env.LAST_RUN == 'new_branch' && '‚ú®' ) || env.LAST_RUN ) }}

            ${{ format('Author: {0} ![Avatar](https://github.com/{1}.png)', github.event.head_commit.author.name, github.event.head_commit.author.username ) }}
            
            Commit: ${{ github.event.head_commit.message }}

            [Details](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) - [Repository](https://github.com/${{ github.repository }}) - [Changes](https://github.com/${{ github.repository }}/commit/${{ github.sha }})

  coveralls_finish:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Coveralls Finished
      uses: AndreMiras/coveralls-python-action@develop
      with:
        parallel-finished: true
